[tool.poetry]
name = "app"
version = "0.0.1"
description = "TEMPLATE_DESCRIPTION"
authors = ["TEMPLATE_AUTHOR <TEMPLATE_AUTHOR_EMAIL>"]
maintainers = ["TEMPLATE_AUTHOR <TEMPLATE_AUTHOR_EMAIL>"]

[tool.poetry.dependencies]
python = "3.12.0"
asyncpg = "^0.29.0"
sqlalchemy = "^2.0.27"
alembic = "^1.13.1"
uvloop = { version = "^0.19.0", markers = "sys_platform == 'linux' or sys_platform == 'darwin'" }
ujson = "^5.9.0"
pydantic = "2.5.3"
sqlmodel = "^0.0.16"
pydantic-settings = "^2.2.0"
aiogram = "^3.4.1"

[tool.poetry.group.dev.dependencies]
black = "23.11.0"
isort = "5.12.0"
flake8 = "6.1.0"
mypy = "1.7.0"
bandit = { extras = ["toml"], version = "1.7.5" }
pytest-asyncio = "0.21.1"
flake8-comments = "0.1.2"
flake8-print = "5.0.0"
coverage = "7.3.2"
ruff = "0.2.2"

[tool.black]
line-length = 100

[tool.autopep8]
max_line_length = 100
in-place = true
recursive = true
aggressive = 3
select = ["E203", "W503"]

[tool.isort]
profile = "black"
line_length = 100
wrap_length = 100
multi_line_output = 3
combine_as_imports = true
force_alphabetical_sort_within_sections = true
overwrite_in_place = true
skip_glob = []

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.12"
follow_imports = "silent"
warn_return_any = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true
namespace_packages = true
exclude = []

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = []
ignore_missing_imports = true

[tool.bandit]
skips = [
    "B311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
pythonpath = ["."]
python_files = ["test_*.py"]

[tool.coverage.run]
source = ["app"]

[tool.coverage.report]
exclude_lines = [
    # Skip any pass lines such as may be used for @abstractmethod.
    "pass",

    # Don't complain if tests don't hit defensive assertion code.
    "raise NotImplementedError",
]

[tool.ruff]
ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring
    "D205",   # 1 blank line required between summary line and description
    "D211",   # No blank lines allowed before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "ANN101", # Missing type annotation for self in method
    "ANN001", # Missing type annotation for function argument 'cls'
    "ANN102", # Missing type annotation for cls in classmethod
    "FIX002", # Line contains TODO, consider resolving an issue
    "DTZ006", # The use of `datetime.datetime.fromtimestamp()` without `tz` argument is not allowed
]
target-version = "py312"
task-tags = ["TODO", "FIXME", "NOTE"]
fix = true
show-fixes = true
preview = true
respect-gitignore = false
line-length = 120
select = [
    "F",     # PyFlakes
    "I",     # isort
    "UP",    # PyUpgrade
    "YTT",   # flake8-2020
    "ASYNC", # flake8-async
    "TRIO",  # flake8-trio
    "B",     # bugbear
    "C4",    # flake8-comprehensions
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "ERA",   # flake8-eradicate
    "PGH",   # pygrep-hooks
    "FLY",   # flynt
    "NPY",   # NumPy-specific rules
    "PERF",  # Perflint
    "FURB",  # Refurb
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "T20",   # flake8-print
    "DTZ",   # flake8-datetimez
    "ARG",   # flake8-unused-arguments
    "PD",    # pandas-vet
    "C90",   # McCabe
    "ANN",   # flake8-annotations
    "FBT",   # flake8-boolean-trap
    "RET",   # flake8-return
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todo
    "FIX",   # flake8-fixme
    "N",     # pep8-naming
    "D",     # flake8-docstrings
    "BLE",   # flake8-blind-except
    "A",     # builtins
    "SLOT",  # flake8-slot
    "PL",    # pylint

]
exclude = [".idea", "*migrations*"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    # "D203",  # Missing docstring in public function
    "S101", # Use of assert detected
]


[tool.ruff.lint.isort]
order-by-type = false
